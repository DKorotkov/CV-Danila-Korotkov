!function(){var t=new FontFaceObserver("LyuLin"),e=document.documentElement;e.classList.contains("fonts-loading")&&t.load().then(function(){e.classList.remove("fonts-loading"),e.classList.add("fonts-loaded"),sessionStorage.fontsLoaded=!0}).catch(function(){e.classList.remove("fonts-loading"),e.classList.add("fonts-failed"),sessionStorage.fontsLoaded=!1});class s{constructor(t){this.constructorOptions=t,this.init()}static init(){this.options=Object.assign({formClassName:"form",errorClassName:"error",inputClassName:"form__input",invalidClassName:"invalid",withValueClassName:"not-empty",errors:{required:"Заполните обязательное поле",email:"Пожалуйста, введите правильный email",type:"Не соответствует формату поля",pattern:"Не соответствует формату поля",tooShort:"Слишком короткое",tooLong:"Слишком динное",stepMismatch:"Неверный шаг (введенный диапозон)",rangeUnderflow:"Меньше диапозона",rangeOverflow:"Больше диапозона",customError:"Ошибка",badInput:"badInput"}},this.constructorOptions),this.forms=document.querySelectorAll("form"),this.forms||console.error("Форма на странице не найдена"),this.forms.forEach(t=>{let e=[...t.querySelectorAll("input")];var s=[...t.querySelectorAll("textarea")];e=e.concat(s),e.forEach(t=>{const e=document.createElement("span");e.classList.add(this.options.formClassName+"__"+this.options.errorClassName),e.setAttribute("aria-live","polite"),t.insertAdjacentElement("afterend",e),t.addEventListener("blur",t=>{this.validate(t),this.isEmpty(t)})}),t.addEventListener("submit",t=>{this.checkValid(t)})})}static isEmpty(t){0<(t=t.target?t.target:t).value.length?t.classList.add(this.options.inputClassName+"--"+this.options.withValueClassName):t.classList.remove(this.options.inputClassName+"--"+this.options.withValueClassName)}static validate(t){const e=(t=t.target?t.target:t).nextElementSibling;if(!t.validity.valid){if(t.validity.valueMissing)return this.setInvalid(t,this.options.errors.required),e;if(t.validity.typeMismatch)return this.setInvalid(t,this.options.errors.type),e;if(t.validity.patternMismatch)return this.setInvalid(t,this.options.errors.pattern),e;if(t.validity.tooShort)return this.setInvalid(t,this.options.errors.tooShort),e;if(t.validity.tooLong)return this.setInvalid(t,this.options.errors.tooLong),e;if(t.validity.stepMismatch)return this.setInvalid(t,this.options.errors.stepMismatch),e;if(t.validity.rangeUnderflow)return this.setInvalid(t,this.options.errors.rangeUnderflow),e;if(t.validity.rangeOverflow)return this.setInvalid(t,this.options.errors.rangeOverflow),e;if(t.validity.customError)return this.setInvalid(t,this.options.errors.customError),e;if(t.validity.badInput)return this.setInvalid(t,this.options.errors.badInput),e}t.classList.remove(this.options.inputClassName+"--"+this.options.invalidClassName),e.innerHTML=""}static setInvalid(t,e){const s=t.nextElementSibling;t.classList.add(this.options.inputClassName+"--"+this.options.invalidClassName),s.innerHTML=e}static checkValid(t){let e=new Array;const s="object"==typeof t.currentTarget?t.currentTarget:t,i=s.querySelectorAll("input");if("object"==typeof t.currentTarget&&t.preventDefault(),i.forEach(t=>{e.push(this.validate(t))}),e=e.filter(function(t){return void 0!==t}),0===e.length)return!0;e[0].previousSibling.focus()}}s.init();class i{_KEYS={ESC:27,SPACE:32,ENTER:13,TAB:9,ARROW_LEFT:37,ARROW_UP:38,ARROW_RIGHT:39,ARROW_DOWN:40};#focusableElements='a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input:not([disabled]), select:not([disabled]), select, details, audio, video, object, [contenteditable=""], [contenteditable="true"], [tabindex]:not([tabindex="-1"])';#defaultOptions={focusTrap:!1,collapseOnFocusOut:!1};constructor(t){this._options=Object.assign(this.#defaultOptions,t),this._$el=document.querySelector(this._options.selector),this.#check()?this.#init():this._hasErrors=!0}#check(){return this._$el?!(void 0!==this._options.matchMedia&&!window.matchMedia(this._options.matchMedia).matches):(console.error("Не найден класс - "+this._options.selector),!1)}#init(){this._$el.addEventListener("click",t=>this._mainElClick(t)),this._$el.addEventListener("keydown",t=>this._checkPress(t),!0)}_initFocusableContent(){this._$lastFocusableEl=this._$el.querySelector('[data-select-last="true"]'),this._getFocusableContent(),this._$lastFocusableEl&&(this._$lastFocusableEl.tabIndex=-1),this._$focusableContent=this._$focusableContent.filter(t=>{if(t!==this._$lastFocusableEl)return t})}#focusTrapAndCollapse(t){const e=this._$focusableContent[0],s=this._$focusableContent[this._$focusableContent.length-1],i=this._$lastFocusableEl;t.shiftKey?document.activeElement!==e&&document.activeElement!==i||(i&&document.activeElement!==i&&!this._options.collapseOnFocusOut?i.focus():(this._options.collapseOnFocusOut&&this.close(),s.focus()),t.preventDefault()):document.activeElement!==s&&document.activeElement!==i||(i&&document.activeElement!==i?i.focus():(this._options.collapseOnFocusOut&&this.close(),e.focus()),t.preventDefault())}_checkPress(t){t.keyCode===this._KEYS.ESC&&this.close(),"Tab"!==t.key&&t.keyCode!==this._KEYS.TAB||(this._options.focusTrap||this._options.collapseOnFocusOut)&&this.#focusTrapAndCollapse(t)}_mainElClick(t){(t.target.closest('[data-close="true"]')||t.target.dataset.close)&&this.close()}_getFocusableContent(){this._$focusableContent=[...this._$el.querySelectorAll(this.#focusableElements)]}open(){this._options.activeClass?this._$el.classList.add(this._options.selector.slice(1)+this._options.activeClass):this._$el.removeAttribute("hidden"),void 0===this._$focusableContent&&this._initFocusableContent(),window.disableScroll()}close(){this._options.activeClass?this._$el.classList.remove(this._options.selector.slice(1)+this._options.activeClass):this._$el.setAttribute("hidden",""),this.destroy()}destroy(){this._$el.removeEventListener("click",t=>this._mainElClick(t)),this._$el.removeEventListener("keydown",t=>this._checkPress(t),!0),window.enableScroll()}}function o(t){t.preventDefault()}let n=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){n=!0}}))}catch(t){}const a=!!n&&{passive:!1},l="onwheel"in document.createElement("div")?"wheel":"mousewheel";window.disableScroll=()=>{window.addEventListener("DOMMouseScroll",o,!1),window.addEventListener(l,o,a),window.addEventListener("touchmove",o,a)},window.enableScroll=()=>{window.removeEventListener("DOMMouseScroll",o,!1),window.removeEventListener(l,o,a),window.removeEventListener("touchmove",o,a)};const r=document.querySelector(".hamburger"),c=document.querySelector(".header__logo");var d,h;new class extends i{#defaultOptions={dialogFullScreen:!0,contentClass:"content",overlay:!0,ovarlayClass:"overlay",overlayBg:"rgba(0,0,0, 0.5)"};#$activeOpenBtn;constructor(t){super(t),this.#check()&&(this._options=Object.assign(this.#defaultOptions,this._options),this._$openBtns=document.querySelectorAll(this._options.openBtnsSelector),this.#init())}#check(){return!this._hasErrors}#init(){"DIALOG"!==this._$el.nodeName&&(this._$el.setAttribute("role","dialog"),this._$el.setAttribute("aria-modal","true"),this._$el.setAttribute("aria-hidden","true"));const t=document.createElement("div");if(t.classList.add(this._options.selector.slice(1)+"__"+this._options.contentClass),t.innerHTML=this._$el.innerHTML,this._$el.innerHTML="",this._$el.appendChild(t),this._options.overlay&&"DIALOG"!==this._$el.nodeName){const e=document.createElement("div");e.style.backgroundColor=this._options.overlayBg,e.style.position="fixed",e.style.inset="0",e.classList.add(this._options.selector.slice(1)+"__"+this._options.ovarlayClass),e.addEventListener("click",this.close.bind(this)),"static"===this._$el.querySelector(":first-child").style.position&&(this._$el.querySelector(":first-child").style.position="relative"),this._$el.insertBefore(e,this._$el.firstChild)}this._$openBtns&&this._$openBtns.forEach(t=>{t.setAttribute("aria-haspopup","dialog"),t.addEventListener("click",this.open.bind(this))})}_mainElClick(t){super._mainElClick(t),"DIALOG"===t.target.nodeName&&this.close()}open(){setTimeout(()=>{"false"===this._$el.getAttribute("aria-hidden")||this._$el.hasAttribute("open")?this.close():(this.#$activeOpenBtn=document.activeElement,"DIALOG"===this._$el.nodeName?this._options.dialogFullScreen?this._$el.showModal():this._$el.show():(super.open(),this._$el.setAttribute("aria-hidden","false")),0<this._$focusableContent.length&&this._$focusableContent[0].focus(),"function"==typeof this._options.onOpen&&this._options.onOpen())},1)}close(){this._$el.setAttribute("closing","");const t="DIALOG"===this._$el.nodeName?this._$el:this._$el.querySelector(`.${this._options.selector.slice(1)}__`+this._options.contentClass);0===t.getAnimations().length?(console.error("Необходимо добавить анимацию для",t),this.#closing()):t.addEventListener("animationend",()=>{this.#closing()},{once:!0}),setTimeout(()=>{-1!==this.#$activeOpenBtn.tabIndex&&this.#$activeOpenBtn.focus(),"function"==typeof this._options.onClose&&this._options.onClose()},1)}#closing(){this._$el.removeAttribute("closing"),"DIALOG"===this._$el.nodeName?(this._$el.close(),super.destroy()):(this._$el.setAttribute("aria-hidden","true"),super.close())}}({selector:".nav",openBtnsSelector:[".hamburger"],collapseOnFocusOut:!0,onOpen(){r.classList.add("is-active"),r.setAttribute("aria-expanded","true"),c.classList.add("header__logo--active")},onClose(){r.classList.remove("is-active"),r.setAttribute("aria-expanded","false"),c.classList.remove("header__logo--active")}});const u=document.querySelector("#btnSendMail"),p=document.querySelector("#form");u&&u.addEventListener("click",t=>(t=>{if(t.preventDefault(),s.checkValid(p)){u.classList.add("msg--sending"),u.setAttribute("disabled","");const e=()=>{u.classList.remove("msg"),document.querySelector(".msg--done").removeEventListener("animationend",e),u.classList.remove("msg--done")};setTimeout(()=>{u.classList.remove("msg--sending"),u.removeAttribute("disabled"),u.classList.add("msg"),u.classList.add("msg--send"),u.setAttribute("data-type","ok")},2e3),setTimeout(()=>{u.classList.remove("msg--send"),u.removeAttribute("data-type"),u.classList.add("msg--done"),document.querySelector(".msg--done").addEventListener("animationend",e)},4e3)}})(t));const m=document.querySelector(".portfolio__list"),_=document.querySelector("#portfolioItemColne");m&&(t="./files/portfolio/data.json",d=function(t){data=JSON.parse(t),data.forEach((t,e)=>{!function(t){const e=new Date(t.createDate),s=_.content.cloneNode(!0),i=s.querySelector(".portfolio__item"),o=i.querySelector(".portfolio__img"),n=i.querySelector(".portfolio__date"),a=i.querySelector(".portfolio__name"),l=i.querySelector(".portfolio__content"),r=i.querySelector(".portfolio__link");i.setAttribute("data-create-date",t.createDate),i.setAttribute("data-type",t.type),i.setAttribute("role","listitem"),o.src=t.img,n.setAttribute("datetime",t.createDate),n.innerHTML=function(t){return["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"][t.getMonth()]+" "+t.getFullYear()}(e),a.innerHTML=t.name,l.innerHTML=t.content,r.href=t.link,i.appendChild(o),i.appendChild(n),i.appendChild(a),i.appendChild(l),i.appendChild(r),m.appendChild(i)}(t)})},(h=new XMLHttpRequest).overrideMimeType("application/json"),h.open("GET",t,!0),h.onreadystatechange=function(){4===h.readyState&&"200"==h.status&&d(h.responseText)},h.send(null))}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
