!function(){var t=new FontFaceObserver("LyuLin"),e=document.documentElement;e.classList.contains("fonts-loading")&&t.load().then(function(){e.classList.remove("fonts-loading"),e.classList.add("fonts-loaded"),sessionStorage.fontsLoaded=!0}).catch(function(){e.classList.remove("fonts-loading"),e.classList.add("fonts-failed"),sessionStorage.fontsLoaded=!1});(class{constructor(t){this.constructorOptions=t,this.init()}static init(){this.options=Object.assign({formClassName:"form",errorClassName:"error",inputClassName:"form__input",invalidClassName:"invalid",withValueClassName:"not-empty",errors:{required:"Заполните обязательное поле",email:"Пожалуйста, введите правильный email",type:"Не соответствует формату поля",pattern:"Не соответствует формату поля",tooShort:"Слишком короткое",tooLong:"Слишком динное",stepMismatch:"Неверный шаг (введенный диапозон)",rangeUnderflow:"Меньше диапозона",rangeOverflow:"Больше диапозона",customError:"Ошибка",badInput:"badInput"}},this.constructorOptions),this.forms=document.querySelectorAll("form"),this.forms||console.error("Форма на странице не найдена"),this.forms.forEach(t=>{const e=t.querySelectorAll("input");e.forEach(t=>{const e=document.createElement("span");e.classList.add(this.options.formClassName+"__"+this.options.errorClassName),e.setAttribute("aria-live","polite"),t.insertAdjacentElement("afterend",e),t.addEventListener("blur",t=>{this.validate(t),this.isEmpty(t)})}),t.addEventListener("submit",t=>{this.checkValid(t)})})}static isEmpty(t){0<(t=t.target?t.target:t).value.length?t.classList.add(this.options.inputClassName+"--"+this.options.withValueClassName):t.classList.remove(this.options.inputClassName+"--"+this.options.withValueClassName)}static validate(t){const e=(t=t.target?t.target:t).nextElementSibling;if(!t.validity.valid){if(t.validity.valueMissing)return this.setInvalid(t,this.options.errors.required),e;if(t.validity.typeMismatch)return this.setInvalid(t,this.options.errors.type),e;if(t.validity.patternMismatch)return this.setInvalid(t,this.options.errors.pattern),e;if(t.validity.tooShort)return this.setInvalid(t,this.options.errors.tooShort),e;if(t.validity.tooLong)return this.setInvalid(t,this.options.errors.tooLong),e;if(t.validity.stepMismatch)return this.setInvalid(t,this.options.errors.stepMismatch),e;if(t.validity.rangeUnderflow)return this.setInvalid(t,this.options.errors.rangeUnderflow),e;if(t.validity.rangeOverflow)return this.setInvalid(t,this.options.errors.rangeOverflow),e;if(t.validity.customError)return this.setInvalid(t,this.options.errors.customError),e;if(t.validity.badInput)return this.setInvalid(t,this.options.errors.badInput),e}t.classList.remove(this.options.inputClassName+"--"+this.options.invalidClassName),e.innerHTML=""}static setInvalid(t,e){const s=t.nextElementSibling;t.classList.add(this.options.inputClassName+"--"+this.options.invalidClassName),s.innerHTML=e}static checkValid(t){let e=new Array;const s="object"==typeof t.currentTarget?t.currentTarget:t,i=s.querySelectorAll("input");if("object"==typeof t.currentTarget&&t.preventDefault(),i.forEach(t=>{e.push(this.validate(t))}),e=e.filter(function(t){return void 0!==t}),0===e.length)return s.submit(),!0;e[0].previousSibling.focus()}}).init();class s{_KEYS={ESC:27,SPACE:32,ENTER:13,TAB:9,ARROW_LEFT:37,ARROW_UP:38,ARROW_RIGHT:39,ARROW_DOWN:40};#focusableElements='a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input:not([disabled]), select:not([disabled]), select, details, audio, video, object, [contenteditable=""], [contenteditable="true"], [tabindex]:not([tabindex="-1"])';#defaultOptions={focusTrap:!1,collapseOnFocusOut:!1};constructor(t){this._options=Object.assign(this.#defaultOptions,t),this._$el=document.querySelector(this._options.selector),this.#check()?this.#init():this._hasErrors=!0}#check(){return this._$el?!(void 0!==this._options.matchMedia&&!window.matchMedia(this._options.matchMedia).matches):(console.error("Не найден класс - "+this._options.selector),!1)}#init(){this._$el.addEventListener("click",t=>this._mainElClick(t)),this._$el.addEventListener("keydown",t=>this._checkPress(t),!0)}_initFocusableContent(){this._$lastFocusableEl=this._$el.querySelector('[data-select-last="true"]'),this._getFocusableContent(),this._$lastFocusableEl&&(this._$lastFocusableEl.tabIndex=-1),this._$focusableContent=this._$focusableContent.filter(t=>{if(t!==this._$lastFocusableEl)return t})}#focusTrapAndCollapse(t){const e=this._$focusableContent[0],s=this._$focusableContent[this._$focusableContent.length-1],i=this._$lastFocusableEl;t.shiftKey?document.activeElement!==e&&document.activeElement!==i||(i&&document.activeElement!==i&&!this._options.collapseOnFocusOut?i.focus():(this._options.collapseOnFocusOut&&this.close(),s.focus()),t.preventDefault()):document.activeElement!==s&&document.activeElement!==i||(i&&document.activeElement!==i?i.focus():(this._options.collapseOnFocusOut&&this.close(),e.focus()),t.preventDefault())}_checkPress(t){t.keyCode===this._KEYS.ESC&&this.close(),"Tab"!==t.key&&t.keyCode!==this._KEYS.TAB||(this._options.focusTrap||this._options.collapseOnFocusOut)&&this.#focusTrapAndCollapse(t)}_mainElClick(t){(t.target.closest('[data-close="true"]')||t.target.dataset.close)&&this.close()}_getFocusableContent(){this._$focusableContent=[...this._$el.querySelectorAll(this.#focusableElements)]}open(){this._options.activeClass?this._$el.classList.add(this._options.selector.slice(1)+this._options.activeClass):this._$el.removeAttribute("hidden"),void 0===this._$focusableContent&&this._initFocusableContent(),window.disableScroll()}close(){this._options.activeClass?this._$el.classList.remove(this._options.selector.slice(1)+this._options.activeClass):this._$el.setAttribute("hidden",""),this.destroy()}destroy(){this._$el.removeEventListener("click",t=>this._mainElClick(t)),this._$el.removeEventListener("keydown",t=>this._checkPress(t),!0),window.enableScroll()}}function i(t){t.preventDefault()}let o=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){o=!0}}))}catch(t){}const n=!!o&&{passive:!1},a="onwheel"in document.createElement("div")?"wheel":"mousewheel";window.disableScroll=()=>{window.addEventListener("DOMMouseScroll",i,!1),window.addEventListener(a,i,n),window.addEventListener("touchmove",i,n)},window.enableScroll=()=>{window.removeEventListener("DOMMouseScroll",i,!1),window.removeEventListener(a,i,n),window.removeEventListener("touchmove",i,n)};const l=document.querySelector(".hamburger"),r=document.querySelector(".header__logo");new class extends s{#defaultOptions={dialogFullScreen:!0,contentClass:"content",overlay:!0,ovarlayClass:"overlay",overlayBg:"rgba(0,0,0, 0.5)"};#$activeOpenBtn;constructor(t){super(t),this.#check()&&(this._options=Object.assign(this.#defaultOptions,this._options),this._$openBtns=document.querySelectorAll(this._options.openBtnsSelector),this.#init())}#check(){return!this._hasErrors}#init(){"DIALOG"!==this._$el.nodeName&&(this._$el.setAttribute("role","dialog"),this._$el.setAttribute("aria-modal","true"),this._$el.setAttribute("aria-hidden","true"));const t=document.createElement("div");if(t.classList.add(this._options.selector.slice(1)+"__"+this._options.contentClass),t.innerHTML=this._$el.innerHTML,this._$el.innerHTML="",this._$el.appendChild(t),this._options.overlay&&"DIALOG"!==this._$el.nodeName){const e=document.createElement("div");e.style.backgroundColor=this._options.overlayBg,e.style.position="fixed",e.style.inset="0",e.classList.add(this._options.selector.slice(1)+"__"+this._options.ovarlayClass),e.addEventListener("click",this.close.bind(this)),"static"===this._$el.querySelector(":first-child").style.position&&(this._$el.querySelector(":first-child").style.position="relative"),this._$el.insertBefore(e,this._$el.firstChild)}this._$openBtns&&this._$openBtns.forEach(t=>{t.setAttribute("aria-haspopup","dialog"),t.addEventListener("click",this.open.bind(this))})}_mainElClick(t){super._mainElClick(t),"DIALOG"===t.target.nodeName&&this.close()}open(){setTimeout(()=>{"false"===this._$el.getAttribute("aria-hidden")||this._$el.hasAttribute("open")?this.close():(this.#$activeOpenBtn=document.activeElement,"DIALOG"===this._$el.nodeName?this._options.dialogFullScreen?this._$el.showModal():this._$el.show():(super.open(),this._$el.setAttribute("aria-hidden","false")),0<this._$focusableContent.length&&this._$focusableContent[0].focus(),"function"==typeof this._options.onOpen&&this._options.onOpen())},1)}close(){this._$el.setAttribute("closing","");const t="DIALOG"===this._$el.nodeName?this._$el:this._$el.querySelector(`.${this._options.selector.slice(1)}__`+this._options.contentClass);0===t.getAnimations().length?(console.error("Необходимо добавить анимацию для",t),this.#closing()):t.addEventListener("animationend",()=>{this.#closing()},{once:!0}),setTimeout(()=>{-1!==this.#$activeOpenBtn.tabIndex&&this.#$activeOpenBtn.focus(),"function"==typeof this._options.onClose&&this._options.onClose()},1)}#closing(){this._$el.removeAttribute("closing"),"DIALOG"===this._$el.nodeName?(this._$el.close(),super.destroy()):(this._$el.setAttribute("aria-hidden","true"),super.close())}}({selector:".nav",openBtnsSelector:[".hamburger"],collapseOnFocusOut:!0,onOpen(){l.classList.add("is-active"),l.setAttribute("aria-expanded","true"),r.classList.add("header__logo--active")},onClose(){l.classList.remove("is-active"),l.setAttribute("aria-expanded","false"),r.classList.remove("header__logo--active")}});tabs=new class extends s{#defaultOptions={initialIndex:0};constructor(t){super(t),this.#check()&&(this._options=Object.assign(this.#defaultOptions,this._options),this.#init(),this.#initARIA())}#check(){return!this._hasErrors}#init(){this._initialIndex=this._options.initialIndex,this._$tabList=this._$el,this._$tabs=[...this._$el.querySelectorAll(this._options.tabItem)],this._$links=[...this._$el.querySelectorAll(this._options.tabItem+" > a")],this._$panels=[],this._$tabs.length!==this._$links.length&&console.error("Недопустимое количество ссылок в элементах табов - "+this._options.tabItem),this._$links.forEach(t=>{t=t.getAttribute("href").slice(1);this._$panels.push(document.querySelector("#"+t))}),this._$panels.filter((t,e)=>e!==this._initialIndex).forEach(t=>t.hidden=!0)}#initARIA(){this._$tabList.setAttribute("role","tablist"),this._$tabs.forEach(t=>t.setAttribute("role","tab")),this._$panels.forEach(t=>{var e=t.getAttribute("id");t.setAttribute("role","tabpanel"),t.setAttribute("aria-labelledby","tab-"+e)}),this._$links.forEach(t=>{var e=t.getAttribute("href").slice(1);t.setAttribute("role","presentation"),t.setAttribute("id","tab-"+e),t.setAttribute("aria-controls",e),t.removeAttribute("href")}),this._$tabs[this._initialIndex].setAttribute("aria-selected","true"),this._$tabs[this._initialIndex].tabIndex=0}_checkPress(t){let e=this._initialIndex;t.keyCode===this._KEYS.ARROW_RIGHT||t.keyCode===this._KEYS.ARROW_DOWN?(e++,e===this._$tabs.length&&(e=0),this.open(e),t.preventDefault()):t.keyCode!==this._KEYS.ARROW_LEFT&&t.keyCode!==this._KEYS.ARROW_UP||(e--,e<0&&(e=this._$tabs.length-1),this.open(e),t.preventDefault())}_mainElClick(t){"presentation"===t.target.getAttribute("role")&&this.open(this._$tabs.indexOf(t.target.parentElement))}open(t){this._close(),this._$tabs[t].setAttribute("aria-selected","true"),this._$tabs[t].tabIndex=0,this._$tabs[t].focus(),this._$panels[t].hidden=!1,this._initialIndex=t}_close(){this._$tabs[this._initialIndex].setAttribute("aria-selected","false"),this._$tabs[this._initialIndex].removeAttribute("tabindex"),this._$panels[this._initialIndex].hidden=!0}}({selector:".resume__tablist",tabItem:".resume__tabitem"})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
